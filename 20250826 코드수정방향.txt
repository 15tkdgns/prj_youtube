1) App.jsx (구조 가독성)
문제: 라우터 동작이 코드만 봐서는 직관적이지 않고, “주소→화면” 매핑 흐름이 보이지 않음.

변경: BrowserRouter/Routes/Route 각각의 역할을 주석으로 명확히 표기, 상단에 페이지 임포트와 Provider 관계를 정리.

효과: 페이지 흐름을 바로 이해. 라우트 추가/수정 시 간편.

2) AuthContext.jsx (세션/스토리지 헬퍼 분리 + 상태 명확화)
문제: 로컬스토리지 접근이 여기저기 흩어져 있고, 상태/세션 처리 흐름을 따라가기 어려움.

변경: loadUsers/saveUsers/setLoggedIn/getLoggedIn/setCurrentUser/clearSession 등 헬퍼 함수로 분리, 상태를 isAuthenticated, currentUser 두 축으로 단순화.

효과: 인증 로직이 읽기-쓰기 경로가 분명해짐. 에러 추적·테스트 용이. 실서비스(서버/토큰)로 이관 시 교체 지점 명확.

3) AuthForm.jsx (공통 제출 흐름으로 단순화)
문제: 로그인/회원가입 분기 로직이 중복되어 흐름을 이해하기 어려움.

변경: mode에 따라 실행 함수만 선택(run = mode === "login" ? login : register)하고, 나머지 흐름은 공통화. 버튼 라벨/오토컴플리트도 변수로 묶음.

효과: 코드를 한 곳에서 관리 가능.

4) HomePage.jsx (세 덩어리로 재구성)
문제: 상태/모달/데이터 로딩이 뒤섞여 복잡하게 보임.

변경: 핵심을 카테고리 선택, 영상 불러오기, 모달 제어 세 블록으로 나눔. authMode 하나로 로그인/회원가입 모달 공통 관리.

효과:  기능 추가(카테고리 확장, 로딩 스켈레톤 등) 시 충돌 최소화.

5) VideoItem.jsx
문제: getThumbnailUrl 실패 시 이미지 깨짐 가능. 데이터 불완전 시 화면 품질 저하.

변경: video.id 기반 **표준 썸네일(hqdefault)**로 세이프가드 추가, 그래도 없으면 placeholder. title/channel/url 모두 기본값 제공.

효과: API/데이터 이상에도 카드가 안정적으로 렌더링. 

6) youtubeApi.js (공통 http 헬퍼 + 동일 반환 형태 + 목업)
문제: 엔드포인트마다 가공 방식 달라 컴포넌트 단에서 조건 처리 필요. API 키 없을 때 개발 중 화면이 비어버림.

변경: httpGet() 헬퍼로 키/BASE_URL/파라미터 공통 처리, mapVideoItem()으로 반환 형태 통일(id/title/channel/url/category). API 키 없을 때 목업 반환.

효과: UI단은 항상 같은 자료구조를 신뢰. 개발·디자인 단계에서 API 키 없이도 화면 확인 가능.

-- 총합 요약
가독성 개선 리팩터링 (라우팅/인증/리스트/API)

App.jsx: 라우팅 주석 및 구조 가독성 개선

AuthContext.jsx: 세션/스토리지 헬퍼 분리, 상태 단순화(isAuthenticated, currentUser)

AuthForm.jsx: 로그인/회원가입 분기 공통 처리

HomePage.jsx: 카테고리/로딩/모달 3블록 분리

VideoItem.jsx: 썸네일 방어 로직 및 기본값

Login/RegisterPage: 불필요 주석 제거, 핵심만 유지

youtubeApi.js: httpGet/목업/반환 형태 통일


코드가 장황하고 중복 로직이 존재해 팀원이 이해·수정하기 어려울 수 있음. 

=> 중복 제거(공통 함수화), 상태·흐름 단순화 적용



-- 테스트 확인완료

로그인/회원가입 플로우 수동 테스트

카테고리 변경 시 인기/검색 영상 로딩 확인

API 키 유무에 따른 목업/실데이터 정상 동작 확인

